use std::str::FromStr;
use num_bigint::BigInt;
use num_bigint::BigUint;
use num_traits::Pow;
use std::ops::Mul;

use cjc_lexer::location::{Loc, Location};
use cjc_lexer::lexer;
use cjc_lexer::token::{Token, CommentType};
use cjc_lexer::error::LexicalError;
use crate::parse_tree::*;

grammar<'input>(input: &'input str);

pub Charj: Program = {
    ProgramUnit + => Program(<>)
};

ProgramUnit: ProgramUnit = {
    PackageDecl => ProgramUnit::PackageDecl(<>),
    ImportDecl => ProgramUnit::ImportDecl(<>),
    ObjectDecl => ProgramUnit::ObjectDecl(<>),
    StructDecl => ProgramUnit::StructDecl(<>),
    FuncDecl => ProgramUnit::FuncDecl(<>),
    StructFuncDecl => ProgramUnit::StructFuncDecl(<>),
}

PackageDecl: Package = {
   "package" <s:Identifier> => Package::Plain(s),
   "pkg" <s:Identifier> => Package::Plain(s),
}

ImportDecl: Import = {
    "import" <s:Identifier> => Import::Standard(s),
    "import" <s:StringLiteral> "as" <id:Identifier> ";" => Import::GlobalSymbol(s, id),
    "import" <s:StringLiteral> "." "*" "as" <id:Identifier> ";" => Import::GlobalSymbol(s, id)
}

StructDecl: Box<StructDecl> = {
     <l:@L> "struct" <name:Identifier> "{" <fields:(<VariableDecl>)*> "}" <r:@R> => {
        Box::new(StructDecl{loc: Loc(l, r), name, fields})
    }
}

ObjectDecl: Box<ObjectDecl> = {
    <l:@L> "object" <name:Identifier> "{" <functions:(<FuncDecl>)*> "}" <r:@R> => {
        Box::new(ObjectDecl{loc: Loc(l, r), name, functions})
    }
}


FuncDecl: Box<FuncDecl> = {
    <l:@L> "fun" <name:Identifier> <params:ParameterList?> "{" <body:BlockStatementOrSemiColon> "}" <r:@R> => {
        let params = params.unwrap_or(Vec::new());

        Box::new(FuncDecl {
            loc: Loc(l, r),
            name,
            params,
            body,
       })
    }
};

StructFuncDecl: Box<StructFuncDecl> = {
    <l:@L> <struct_name:Identifier> "$" <name:Identifier> <params:ParameterList?> <returns:("->" Expression)?> "{" <body:BlockStatementOrSemiColon> "}" <r:@R> => {
        let params = params.unwrap_or(Vec::new());

        Box::new(StructFuncDecl{
            loc: Loc(l, r),
            name, struct_name,
            params,
            body,
            returns: returns.map(|returns| returns.1),
        })
    }
}

VariableDecl: Statement = {
    <l:@L><field:Identifier> ":" <ty:TypeLiteral><r:@R> => {
        Statement {
            location: Location::new(l, r),
            node: StatementType::VariableDecl {
                field,
                ty
            }
        }
    }
};

BlockStatementOrSemiColon: Option<Statement> = {
    <@L> <@R> ";" => None,
    BlockStatement => Some(<>),
}

BlockStatement: Statement = {
    <l:@L> <s:CompoundStatement*> <r:@R> => {
        Statement {
            location: Location::new(l, r),
            node: StatementType::Block {
                blocks: s
            }
        }
    },
}

CompoundStatement: Statement = {
// todo: add support for open || close statement
//    OpenStatement,    // support like in one line if (a > b) return a
//    ClosedStatement,
    IfStatement,
    WhileStatement,
    ForStatement,
    FlowStatement,
    ExpressionStatement,
}

ExpressionStatement: Statement = {
    <l:@L> "let" <name:Identifier> ":" <typ:TypeLiteral> "=" <e:Expression> <r:@R> => {
        Statement {
            location: Location::new(l, r),
            node: StatementType::Assign {
                target: name,
                ty: typ,
                value: e
            },
        }
    },
    <l:@L> <e:Expression> <r:@R> => {
        Statement {
            location: Location::new(l, r),
            node: StatementType::Expression { expr: e },
        }
    }
}

CompOp: Comparison = {
    "==" => Comparison::Equal,
    "!=" => Comparison::NotEqual,
    "<" => Comparison::Less,
    "<=" => Comparison::LessOrEqual,
    ">" => Comparison::Greater,
    ">=" => Comparison::GreaterOrEqual,
};

FlowStatement: Statement = {
    <l:@L> "break" <r:@R> => {
        Statement {
            location: Location::new(l, r),
            node: StatementType::Break,
        }
    },
    <l:@L> "continue" <r:@R> => {
        Statement {
            location: Location::new(l, r),
            node: StatementType::Continue,
        }
    },
    <l:@L> "return" <value:ReturnList?> ";" <r:@R> => {
        Statement {
            location: Location::new(l, r),
            node: StatementType::Return { value },
        }
    },
}

ReturnList: Expression = {
    <l:@L> <elements:OneOrMore<ReturnValue>> <trailing_comma: ","?> <r:@R> => {
        Expression {
            location: Location::new(l, r),
            node: ExpressionType::List { elements },
        }
    }
}

ReturnValue: Expression = {
    <l:@L><n:Identifier><r:@R> => {
        Expression {
            location: Location::new(l, r),
            node: ExpressionType::Identifier { name: n }
        }
    }
}

IfStatement: Statement = {
    // todo: support for ClosedStatement.
    <l:@L> "if" "(" <cond:Expression> ")" "{" <body:CompoundStatement> "}" <s3:("else" "{" CompoundStatement "}")?> <r:@R> => {        let mut last = s3.map(|s| s.2);
        // let mut last = s3.map(|s| s.2);
        println!("{:?}", last);

        Statement {
            location: Location::new(l, r),
            node: StatementType::If {
                cond,
                body: Box::new(body),
                orelse: None
            }
        }
    }
};

WhileStatement: Statement = {
    <l:@L> "while" "(" <cond:Expression> ")" "{" <body:CompoundStatement> "}" <r:@R> => {
        Statement {
            location: Location::new(l, r),
            node: StatementType::While {
                cond,
                body: Box::new(body)
            }
        }
    }
};

ForStatement: Statement = {
    // todo: change target to ExpressionList,
    // todo: add support for `for (let i: int = 0; i < 100; i ++) { }
    <l:@L> "for" "(" <target:Expression> "in" <iter:Expression> ")" "{" <body:CompoundStatement> "}" <r:@R> => {
        Statement {
            location: Location::new(l, r),
            node: StatementType::For {
                target: Box::new(target),
                iter: Box::new(iter),
                body: Some(Box::new(body))
            }
        }
    }
};

Expression: Expression = {
    UnaryExpr,
}

UnaryExpr: Expression = {
    RangeExpression
}

RangeExpression: Expression = {
    <e1:RangeExpression> <l:@L> ".." <e2:OrExpression> <r:@R> => {
        Expression {
           location: Location::new(l, r),
           node: ExpressionType::Range { start: Box::new(e1), end: Box::new(e2) }
       }
    },
    OrExpression
}

OrExpression: Expression = {
    <e1:OrExpression> <l:@L> "||" <e2:AndExpression> <r:@R> => {
       let mut values = vec![e1];
       values.push(e2);

       Expression {
           location: Location::new(l, r),
           node: ExpressionType::BoolOp { op: BooleanOperator::Or, values }
       }
   },
    AndExpression
}

AndExpression: Expression = {
    <e1:AndExpression> <l:@L> "&&" <e2:CompareExpression> <r:@R> => {
        let mut values = vec![e1];
        values.push(e2);

        Expression {
            location: Location::new(l, r),
            node: ExpressionType::BoolOp { op: BooleanOperator::And, values }
        }
    },
    CompareExpression
}

CompareExpression: Expression = {
    <e:CompareExpression> <l:@L> <op:CompOp> <comparison:ShiftExpression> <r:@R> => {
        Expression {
            location: Location::new(l, r),
            node: ExpressionType::Compare {
                op,
                left: Box::new(e),
                right: Box::new(comparison)
            }
        }
    },
    ShiftExpression,
}

ShiftExpression: Expression = {
    <e1:ShiftExpression> <l:@L> <op:ShiftOp> <e2:ArithmeticExpression> <r:@R> => Expression {
        location: Location::new(l, r),
        node: ExpressionType::Binop { a: Box::new(e1), op, b: Box::new(e2) }
    },
    ArithmeticExpression,
}

ShiftOp: Operator = {
    "<<" => Operator::LShift,
    ">>" => Operator::RShift,
};

// Unary Expr
ArithmeticExpression: Expression = {
    <a:ArithmeticExpression> <l:@L> <op:AddOp> <b:Term> <r:@R> => Expression {
        location: Location::new(l, r),
        node: ExpressionType::Binop { a: Box::new(a), op, b: Box::new(b) }
    },
    Term
};

AddOp: Operator = {
    "+" => Operator::Add,
    "-" => Operator::Sub,
};

Term: Expression = {
    <a:Term> <l:@L> <op:MulOp> <b:NotExpression> <r:@R> => Expression {
        location: Location::new(l, r),
        node: ExpressionType::Binop { a: Box::new(a), op, b: Box::new(b) }
    },
    NotExpression,
};

NotExpression: Expression = {
    <l:@L> "!" <r:@R> <e:NotExpression> => {
       Expression {
           location: Location::new(l, r),
           node: ExpressionType::Unop { op: UnaryOperator::Not, a: Box::new(e) }
       }
   },
   PrimaryExpr,
}

PrimaryExpr: Expression = {
    <FunctionCall> => <>,
    <e:PrimaryExpr> <l:@L> "." <name:Identifier> <r:@R> => {
        Expression {
            location: Location::new(l, r),
            node: ExpressionType::MemberAccess { value: Box::new(e), name }
        }
    },
    Atom,
//    ParenthesizedExpression,
}

ParenthesizedExpression: Expression = {
    "(" <e:Expression> ")" => e,
}

FunctionCall: Expression = {
    <l:@L> <f:PrimaryExpr> "(" <a: Comma<Argument>> ")" <r:@R> => {
        Expression {
            location: Location::new(l, r),
            node: ExpressionType::Call { function: Box::new(f), args: a }
        }
    },
}

UnOp: UnaryOperator = {
    "+" => UnaryOperator::Pos,
    "-" => UnaryOperator::Neg,
    "~" => UnaryOperator::Inv,
};

MulOp: Operator = {
    "*" => Operator::Multiply,
    "/" => Operator::Divide,
    "%" => Operator::Modulo,
};

Atom: Expression = {
    // system type & user custom type
    TypeLiteral,
    // "string"
    <l:@L> <value:LexStringLiteral> <r:@R> => Expression {
        location: Location::new(l, r),
        node: ExpressionType::String { value: value.to_string() }
    },
    <l:@L> "[" <v:OneOrMore<Expression>> "]" <r:@R> => {
        Expression {
            location: Location::new(l, r),
            node: ExpressionType::List { elements: v },
        }
    },
    <l:@L> <n:LexNumber> <r:@R> => {
        let base: String = n.0.chars().filter(|v| *v != '_').collect();
        let exp: String = n.1.chars().filter(|v| *v != '_').collect();

        let n = if exp.is_empty() {
            BigInt::from_str(&base).unwrap()
        } else {
            let base = BigInt::from_str(&base).unwrap();
            let exp = BigInt::from_str("10").unwrap().pow(BigUint::from_str(&exp).unwrap());

            base.mul(exp)
        };

        Expression {
            location: Location::new(l, r),
            node: ExpressionType::Number { value: n }
        }
    },
}

TypeLiteral: Expression = {
    // bool, int, string
    <l:@L> <ty:Type> <r:@R> => {
        Expression {
            location: Location::new(l, r),
            node: ExpressionType::Type {ty}
        }
    },
    // name
    <l:@L> <name: Identifier> <r:@R> => {
        Expression {
            location: Location::new(l, r),
            node: ExpressionType::Identifier { name }
        }
    },
    // list
    <l:@L> "[" "]" <ty: TypeLiteral><r:@R> => {
        Expression {
            location: Location::new(l, r),
            // todo: add list value support
            node: ExpressionType::List { elements: vec![] },
        }
    },
}

Type: Type = {
    "bool" => Type::Bool,
    "string" => Type::String,
    Int => Type::Int(<>),
}

Argument: Argument = {
    <l:@L> <p:Expression> <r:@R> =>  {
        Argument { location: Location::new(l, r), expr: p }
    },
}

ParameterList: Vec<(Loc, Option<Parameter>)> = {
    "(" ")" => Vec::new(),
    "(" <l:@L> <p:Parameter> <r:@R> ")" => vec!((Loc(l, r), Some(p))),
    "(" <CommaTwo<OptParameter>> ")" => <>,
}

OptParameter: (Loc, Option<Parameter>) = {
    <l:@L> <p:Parameter?> <r:@R> => (Loc(l, r), p),
}

// A parameter list is used for function arguments, returns, and destructuring statements.
// In destructuring statements, parameters can be optional. So, we make parameters optional
// and as an added bonus we can generate error messages about missing parameters/returns
// to functions
Parameter: Parameter = {
    <l:@L> <ty:Expression> <name:Identifier?> <r:@R> => {
        let loc = Loc(l, r);
        Parameter{loc, ty, name}
    }
}

Identifier: Identifier = {
    <l:@L> <n:LexIdentifier> <r:@R> => Identifier{loc: Loc(l, r), name: n.to_string()}
}

StringLiteral: StringLiteral = {
    <l:@L> <s:LexStringLiteral> <r:@R> => {
        StringLiteral{ loc: Loc(l, r), string: s.to_string() }
    }
}

Comma<T>: Vec<T> = {
    => Vec::new(),
    CommaOne<T> => <>,
};

CommaOne<T>: Vec<T> = {
    <e:T> <v:("," <T>)*>  => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

#[inline]
OneOrMore<T>: Vec<T> = {
    <i1: T> <i2:("," T)*> => {
        let mut items = vec![i1];
        items.extend(i2.into_iter().map(|e| e.1));
        items
    }
};

CommaTwo<T>: Vec<T> = {
    <e:T> <v:("," <T>)+>  => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        LexIdentifier => Token::Identifier(<&'input str>),
        LexStringLiteral => Token::StringLiteral(<&'input str>),
        LexNumber => Token::NumberLiteral(<&'input str>, <&'input str>),

        DocComment => Token::DocComment(<CommentType>, <&'input str>),
        // operators symbol

        // keywords
        "default" => Token::Default,
        "import" => Token::Import,
        "package" => Token::Package,
        "struct" => Token::Struct,
        "pkg" => Token::Package,
        "as" => Token::As,
        "fun" => Token::Fun,
        "let" => Token::Let,
        "object" => Token::Object,

        // statement
        "if" => Token::If,
        "else" => Token::Else,
        "while" => Token::While,
        "for" => Token::For,
        "in" => Token::In,
        ".." => Token::Range,
        "break" => Token::Break,
        "continue" => Token::Continue,
        "return" => Token::Return,

        "bool" => Token::Bool,
        "string" => Token::String,
        "bytes" => Token::DynamicBytes,
        Int => Token::Int(<u16>),
        Uint => Token::Uint(<u16>),
        Bytes => Token::Bytes(<u8>),

        // other symbols
        "\n" => Token::NewLine,
        "$" => Token::Binding,

        ";" => Token::Semicolon,
        "{" => Token::OpenCurlyBrace,
        "}" => Token::CloseCurlyBrace,
        "(" => Token::OpenParenthesis,
        ")" => Token::CloseParenthesis,
        "=" => Token::Assign,
        "==" => Token::Equal,
        "=>" => Token::Arrow,

        "|=" => Token::BitwiseOrAssign,
        "^=" => Token::BitwiseXorAssign,
        "&=" => Token::BitwiseAndAssign,
        "<<=" => Token::ShiftLeftAssign,
        ">>=" => Token::ShiftRightAssign,
        "+=" => Token::AddAssign,
        "-=" => Token::SubtractAssign,
        "*=" => Token::MulAssign,
        "/=" => Token::DivideAssign,
        "%=" => Token::ModuloAssign,

        "?" => Token::Question,
        ":" => Token::Colon,
        "||" => Token::Or,
        "&&" => Token::And,
        "!=" => Token::NotEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::More,
        ">=" => Token::MoreEqual,
        "->" => Token::Rarrow,
        "|" => Token::BitwiseOr,
        "&" => Token::BitwiseAnd,
        "^" => Token::BitwiseXor,
        "<<" => Token::ShiftLeft,
        ">>" => Token::ShiftRight,
        "+" => Token::Add,
        "-" => Token::Subtract,
        "*" => Token::Mul,
        "/" => Token::Divide,
        "%" => Token::Modulo,
        "**" => Token::Power,
        "!" => Token::Not,
        "~" => Token::Complement,
        "++" => Token::Increment,
        "--" => Token::Decrement,
        "[" => Token::OpenBracket,
        "]" => Token::CloseBracket,
        "." => Token::Member,
        "," => Token::Comma,
    }
}

